@using Entidades

@inject Principal Principal
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Microsoft.JSInterop

<MostrarAlerta @ref="Alert" />
<div id="mapaOverlay">
<center class="agrandar-botones">

@* MAPTILER *@
<div id="map" class="mapa-css" style="width: 100%; height: 61rem; overflow: hidden;"></div>
        <div id="modalWindow" class="modal" style="width: 50%;height: auto;">
            <span class="close-btn" id="closeModal" @onclick="CerrarMapaModal">&times;</span>
             <div class="modal-content">
           <div class="modal-body">
                    <ng-form name="nameDialog" novalidate="" role="form" class="ng-pristine ng-invalid ng-invalid-required" style="text-align: left;">
              <div class="form-group input-group-lg" ng-class="{true: 'has-error'}[nameDialog.username.$dirty &amp;&amp; nameDialog.username.$invalid]">
                  @*FULL CALENDAR*@
                  <label class="control-label" for="username" style="font-weight: bold">Seleccionar día de encuentro:</label>
                      <div id='calendar' style="width:100%; height: 600px;"></div>                
              </div>
              </ng-form>
              </div>
              <div class="modal-footer">
                    <button @onclick="CerrarMapa2" class="custom-btn btn-3"><span>Confirmar Encuentro</span></button>
                </div>
            </div>
        </div>
</center>
</div>

@code {
    //PARAMETROS GENERALES
    [CascadingParameter] Blazored.Modal.BlazoredModalInstance ModalInstance { get; set; }
    public MostrarAlerta Alert;

    private async Task CerrarMapaModal(MouseEventArgs e)
    {
        await JS.InvokeVoidAsync("cerrarModal");
    }
    private async Task CerrarMapa2(MouseEventArgs e)
    {
        try
        {
            if (Principal.Carrito?.Productos.Count > 0)
            {
                var random = new Random();

                var totalCarrito = Principal.Carrito.GetPrecioTotal();

                if (totalCarrito > 0)
                {
                    var transactionData = new TransactionDataTo
                        {
                            buy_order = random.Next(999999999).ToString(),
                            session_id = random.Next(999999999).ToString(),
                            amount = Convert.ToInt32(totalCarrito),
                            return_url = "https://localhost:5002/ReservaTransbank"
                        };
                    await JS.InvokeVoidAsync("cerrarModal");
                    await JS.InvokeVoidAsync("desactivarMapaOverlay");
                    var transactionResponse = await TransbankService.CreateTransaction(transactionData);
                    if (transactionResponse != null && !transactionResponse.Error)
                    {
                        Principal.TransactionResponse = transactionResponse;
                        NavigationManager.NavigateTo($"{transactionResponse.Url}?token_ws={transactionResponse.Token}", true);
                    }
                    else
                    {
                        Alert.ShowAlert("Error", "Se han detectado problemas al contactar con Transbank, favor informar a soporte: aguileraignacio1992@gmail.com", "error");
                    }
                }
            }
            else
            {
                Alert.ShowAlert("Sin productos seleccionados", $"Primero deberá añadir al carrito un producto para continuar con la compra.", "warning");
            }
        }
        catch (Exception ex)
        {
            Alert.ShowAlert("Error", "Se han detectado problemas al contactar con Transbank, favor informar a soporte: aguileraignacio1992@gmail.com", "error");

        }
    }
    [JSInvokable("CerrarMapaJS")]
    public void CerrarMapa()
    {
        // Lógica para cerrar el mapa
        Alert.ShowAlert("Confirmado el encuentro!", "Para finalizar realizar la reserva de la compra.", "success");
    }
}
<style>
    .swal2-container{
    z-index: 9999 !important;
}
</style>
<script type="text/javascript">
    maptilersdk.config.apiKey = 'rvHUmSHpbNCQdRfaXg1e';

    //MODAL
    function mostrarModal() {
        const modal = document.getElementById("modalWindow");
        modal.style.display = "block";
    }

    function cerrarModal() {
        const modal = document.getElementById("modalWindow");
        modal.style.display = "none";
    }
    const map = new maptilersdk.Map({
        container: 'map',
        style: "streets-v2",
        center: [-70.686393, -33.434907],
        zoom: 15.6,
    });


    // Método para inicializar la referencia a Blazor
    window.initializeBlazorComponent = function (dotNetHelper) {
        window.blazorComponent = dotNetHelper;
    };
    window.activarMapaOverlay = function () {
        const elemento = document.getElementById('mapaOverlay');
        if (elemento) {
            elemento.style.display = 'block';
        }
        map.flyTo({
            zoom: 13.9,
            speed: 0.7,
            curve: 1,
        });

        // FULL CALENDAR
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'es',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth'
            },
            events: function (fetchInfo, successCallback, failureCallback) {
                var events = [];
                var today = new Date();
                var futureDate = new Date(today);
                futureDate.setMonth(today.getMonth() + 3);

                for (var date = new Date(today); date <= futureDate; date.setDate(date.getDate() + 1)) {
                    if (date.getTime() === (today.getTime() + (3 * 24 * 60 * 60 * 1000))) {
                        events.push({
                            title: 'NO DISPONIBLE',
                            start: new Date(date),
                            allDay: true,
                            color: 'red',
                            textColor: 'white'
                        });
                    } else if (date.getTime() === (today.getTime() + (8 * 24 * 60 * 60 * 1000))) {
                        events.push({
                            title: 'NO DISPONIBLE',
                            start: new Date(date),
                            allDay: true,
                            color: 'red',
                            textColor: 'white'
                        });
                    } else {
                        events.push({
                            title: 'Reserva!',
                            start: new Date(date),
                            allDay: true,
                            color: 'blue',
                            textColor: 'white'
                        });
                    }
                }
                successCallback(events);
            },
            validRange: {
                start: new Date().toISOString().split('T')[0]
            },
            dateClick: function (info) {
                var selectedDate = new Date(info.dateStr);
                var isNoDisponible = false;

                calendar.getEvents().forEach(function (event) {
                    var eventStart = new Date(event.start.toDateString());
                    var selectedDay = new Date(selectedDate.toDateString());

                    if (eventStart.getTime() === selectedDay.getTime() && event.title === "NO DISPONIBLE") {
                        isNoDisponible = true;
                    }
                });

                if (isNoDisponible) {
                    alert("No se puede seleccionar este día, está marcado como NO DISPONIBLE.");
                } else {
                    var day = selectedDate.getDate();
                    var month = selectedDate.getMonth() + 1;
                    var year = selectedDate.getFullYear();
                    //alert('Fecha seleccionada: ' + day + '/' + month + '/' + year);
                    return Swal.fire({
                            title: day + "/" + month + "/" + year,
                            text: "Fecha seleccionada para reserva: "+ day + "/" + month + "/" + year,
                            imageUrl: "https://cdn-icons-png.flaticon.com/512/2907/2907150.png",
                            imageWidth: 200,
                            imageHeight: 170,
                            showCancelButton: false,
                            confirmButtonText: 'Entendido! <i class="fa-solid fa-calendar"> ',                            
                            }).then(result => {
                                return result.isConfirmed;
                            });
                    DotNet.invokeMethodAsync('SitioWeb', 'CerrarMapaJS')
                        .then(() => {
                            console.log('Método C# invocado correctamente.');
                        })
                        .catch(error => {
                            console.error('Error al invocar el método C#: ', error);
                        });
                }
            },
            eventClick: function (info) {
                var eventDate = info.event.start;
                var day = eventDate.getDate();
                var month = eventDate.getMonth() + 1;
                var year = eventDate.getFullYear();
                //alert('Fecha seleccionada: ' + day + '/' + month + '/' + year + ' (SE PUEDE RESERVAR)');
                return Swal.fire({
                            title: day + "/" + month + "/" + year,
                            text: "Fecha seleccionada para reserva: "+ day + "/" + month + "/" + year,
                            imageUrl: "https://cdn-icons-png.flaticon.com/512/2907/2907150.png",
                            imageWidth: 200,
                            imageHeight: 170,
                            showCancelButton: false,
                            confirmButtonText: 'Entendido! <i class="fa-solid fa-calendar"> ',                            
                            }).then(result => {
                                return result.isConfirmed;
                            });
                DotNet.invokeMethodAsync('SitioWeb', 'CerrarMapaJS')
                    .then(() => {
                        console.log('Método C# invocado correctamente.');
                    })
                    .catch(error => {
                        console.error('Error al invocar el método C#: ', error);
                    });

            },
            datesSet: function () {
                setTimeout(function () {
                    var monthButton = document.querySelector(".fc-dayGridMonth-button");
                    if (monthButton) {
                        monthButton.click();
                    } else {
                        console.error("El botón de vista mensual no se encontró.");
                    }
                }, 0);
                var days = document.querySelectorAll('.fc-scrollgrid-sync-table');
                days.forEach(function (day) {
                    day.style.cursor = 'pointer';
                });
            }
        });
        calendar.render();
    };
   

    window.desactivarMapaOverlay = function () {
        const elemento = document.getElementById('mapaOverlay');
        if (elemento) {
            elemento.style.display = 'none';
        }
        map.flyTo({
            center: [-70.686393, -33.434907],
            zoom: 15.6,
            speed: 0.7,
            curve: 1,
        });
    };
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            desactivarMapaOverlay();
        }
    });
    // Coordenadas adicionales
    const coordinates = [
        [-70.686393, -33.434907], // HOME
        [-70.636457, -33.433446], // DARDIGNAC
        [-70.633856, -33.437103], // METRO BAQUEDANO
        [-70.679953, -33.440264], // METRO QUINTA NORMAL
        [-70.629051, -33.452693], // METRO IRRARAZABAL
        [-70.658798, -33.453110], // METRO TOESCA
        [-70.613475, -33.439129]  // METRO INES DE SUAREZ
    ];

    // Icono para la primera coordenada con efecto de rebote
    const homeIcon = document.createElement('div');
    homeIcon.style.backgroundImage = `url(https://cdn-icons-gif.flaticon.com/11201/11201850.gif)`;
    homeIcon.style.width = '140px';
    homeIcon.style.height = '140px';
    homeIcon.style.backgroundSize = 'contain';
    homeIcon.style.backgroundRepeat = 'no-repeat';
    homeIcon.style.backgroundPosition = 'center';
    homeIcon.style.mixBlendMode = 'multiply'; // Aplica el efecto de mezcla
    document.body.appendChild(homeIcon);

    // Icono para las demás coordenadas
    const iconUrl = 'gps-delivery.png';
    const defaultIcon = document.createElement('div');
    defaultIcon.style.backgroundImage = `url(${iconUrl})`;
    defaultIcon.style.width = '110px';
    defaultIcon.style.height = '110px';
    defaultIcon.style.backgroundSize = 'contain';
    defaultIcon.style.backgroundRepeat = 'no-repeat';
    defaultIcon.style.backgroundPosition = 'center';
    defaultIcon.style.cursor = 'pointer';
    defaultIcon.id = 'defaultIcon';
    defaultIcon.style.title = 'Click para seleccionar lugar de Entrega!';

    const createPopupContent = () => {
        const popupContent = document.createElement('div');
        popupContent.style.padding = '10px';
        popupContent.style.fontSize = '14px';
        popupContent.style.fontFamily = 'Arial, sans-serif';
        popupContent.style.color = '#333';
        popupContent.style.backgroundColor = 'white';
        popupContent.style.border = '1px solid #ccc';
        popupContent.style.borderRadius = '5px';
        popupContent.innerHTML = '<strong>Aquí estas!</strong>';
        return popupContent;
    };

    // Agregar marcadores a las coordenadas
    coordinates.forEach((coord, index) => {
        const marker = new maptilersdk.Marker({ element: index === 0 ? homeIcon : defaultIcon.cloneNode(true) })
            .setLngLat(coord)
            .addTo(map);
        // // Agregar evento de clic al marcador
        // marker.getElement().addEventListener('click', () => {
        //     alert('AMO A MI MAI');
        // });
        // Agregar evento de clic al marcador
        marker.getElement().addEventListener('click', () => {
            mostrarModal();  // Mostrar la ventana modal cuando se hace clic en el marcador
        });
        // Agregar popup solo a la primera coordenada
        if (index === 0) {
            const popup = new maptilersdk.Popup({ offset: 50 })  // Ajuste de offset
                .setDOMContent(createPopupContent());
            marker.setPopup(popup).togglePopup();
        }
    });

    map.on('error', (e) => {
        console.error('Error cargando el mapa:', e.error);
    });
</script>
