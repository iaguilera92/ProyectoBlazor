@using Entidades

@inject Principal Principal
@inject IJSRuntime JS

<MostrarAlerta @ref="Alert" />
<div id="mapaOverlay">
<center class="agrandar-botones">

@* MAPTILER *@
<div id="map" class="mapa-css" style="width: 98.9%; height: 61rem; overflow: hidden;"></div>
 <div id="modalOverlay" class="modal-overlay"></div>
        <div id="modalWindow" class="modal" style="width: 50%;height: auto;">
            <span class="close-btn" id="closeModal" @onclick="CerrarMapaModal">&times;</span>
      <div class="modal-content"><div class="modal-header">
          <h4 class="modal-title">
            <span class="glyphicon glyphicon-star"></span> Presencial
          </h4>
          </div>
                <div class="modal-body">
                    <ng-form name="nameDialog" novalidate="" role="form" class="ng-pristine ng-invalid ng-invalid-required" style="text-align: left;">
              <div class="form-group input-group-lg" ng-class="{true: 'has-error'}[nameDialog.username.$dirty &amp;&amp; nameDialog.username.$invalid]">
                  @*FULL CALENDAR*@
                  <label class="control-label" for="username" style="font-weight: bold">Fecha Encuentro:</label>
                      <div id='calendar' style="width:100%; height: 600px;"></div>
                  <br />
                  <label class="control-label" for="username" style="font-weight: bold">Hora Encuentro:</label>
                  <input type="text" class="form-control ng-pristine ng-invalid ng-invalid-required" name="username" id="username" ng-model="user.name" ng-keyup="hitEnter($event)" required="">
                  <span class="help-block">Elija la hora que más le acomode según horarios.</span>
              </div>
              </ng-form>
              </div>
              <div class="modal-footer">
                   <button @onclick="CerrarMapaModal" class="custom-btn btn-3">Confirmar Encuentro</button>
          </div>
      </div>
 </div>
</center>
</div>

@code {
    //PARAMETROS GENERALES
    [CascadingParameter] Blazored.Modal.BlazoredModalInstance ModalInstance { get; set; }
    public MostrarAlerta Alert;

    private async Task CerrarMapaModal(MouseEventArgs e)
    {
        await JS.InvokeVoidAsync("desactivarMapaOverlay");
        Alert.ShowAlert("Confirmado el encuentro!", "Para finalizar realizar la reserva de la compra.", "success");
    }
    private async Task CerrarMapa(MouseEventArgs e)
    {        
        // Alert.ShowAlert("Confirmado el encuentro!","Para finalizar realizar la reserva de la compra.","success");
    }
}

<script type="text/javascript">
    maptilersdk.config.apiKey = 'rvHUmSHpbNCQdRfaXg1e';

    // Mostrar la ventana modal
    function mostrarModal() {
        const modal = document.getElementById("modalWindow");
        const overlay = document.getElementById("modalOverlay");
        modal.style.display = "block";
        overlay.style.display = "block";
    }


    const map = new maptilersdk.Map({
        container: 'map',
        style: "streets-v2",
        center: [-70.686393, -33.434907],
        zoom: 15.6,
    });

    window.activarMapaOverlay = function () {
        const elemento = document.getElementById('mapaOverlay');
        if (elemento) {
            elemento.style.display = 'block';
        }
        map.flyTo({
            zoom: 13.9,
            speed: 0.7,
            curve: 1,
        });

        // FULL CALENDAR
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'es',  // Establece el idioma en español
            headerToolbar: {
                left: 'prev,next today', // Los botones de la izquierda
                center: 'title', // El título (mes actual)
                right: 'dayGridMonth' // Las vistas de mes, semana, día
            },
            events: [
                {
                    title: 'Reserva!', // Título del evento
                    start: new Date(), // Establecer la fecha actual
                    allDay: true, // Todo el día
                    description: 'Este es un mensaje de prueba', // Descripción opcional
                    color: 'blue', // Color del evento
                    textColor: 'white' // Color del texto
                }
            ]
        });
        calendar.render();
        //FIN FULL CALENDAR
    };

    window.desactivarMapaOverlay = function () {
        const elemento = document.getElementById('mapaOverlay');
        if (elemento) {
            elemento.style.display = 'none';
        }
        map.flyTo({
            center: [-70.686393, -33.434907],
            zoom: 15.6,
            speed: 0.7,
            curve: 1,
        });
    };
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            desactivarMapaOverlay();
        }
    });
    // Coordenadas adicionales
    const coordinates = [
        [-70.686393, -33.434907], // HOME
        [-70.636457, -33.433446], // DARDIGNAC
        [-70.633856, -33.437103], // METRO BAQUEDANO
        [-70.679953, -33.440264], // METRO QUINTA NORMAL
        [-70.629051, -33.452693]  // METRO IRRARAZABAL
    ];

    // Icono para la primera coordenada con efecto de rebote
    const homeIconUrl = 'gps-home.png';
    const homeIcon = document.createElement('div');
    homeIcon.style.backgroundImage = `url(${homeIconUrl})`;
    homeIcon.style.width = '100px';
    homeIcon.style.height = '100px';
    homeIcon.style.backgroundSize = 'contain';
    homeIcon.style.backgroundRepeat = 'no-repeat';
    homeIcon.style.backgroundPosition = 'center';
    homeIcon.classList.add('bounce-animation');  // Aplicar la animación de rebote

    // Icono para las demás coordenadas
    const iconUrl = 'gps-delivery.png';
    const defaultIcon = document.createElement('div');
    defaultIcon.style.backgroundImage = `url(${iconUrl})`;
    defaultIcon.style.width = '110px';
    defaultIcon.style.height = '110px';
    defaultIcon.style.backgroundSize = 'contain';
    defaultIcon.style.backgroundRepeat = 'no-repeat';
    defaultIcon.style.backgroundPosition = 'center';
    defaultIcon.style.cursor = 'pointer';
    defaultIcon.id = 'defaultIcon';
    defaultIcon.style.title = 'Click para seleccionar lugar de Entrega!';

    const createPopupContent = () => {
        const popupContent = document.createElement('div');
        popupContent.style.padding = '10px';
        popupContent.style.fontSize = '14px';
        popupContent.style.fontFamily = 'Arial, sans-serif';
        popupContent.style.color = '#333';
        popupContent.style.backgroundColor = 'white';
        popupContent.style.border = '1px solid #ccc';
        popupContent.style.borderRadius = '5px';
        popupContent.innerHTML = '<strong>Aquí estoy baby :(</strong>';
        return popupContent;
    };

    // Agregar marcadores a las coordenadas
    coordinates.forEach((coord, index) => {
        const marker = new maptilersdk.Marker({ element: index === 0 ? homeIcon : defaultIcon.cloneNode(true) })
            .setLngLat(coord)
            .addTo(map);
        // // Agregar evento de clic al marcador
        // marker.getElement().addEventListener('click', () => {
        //     alert('AMO A MI MAI');
        // });
        // Agregar evento de clic al marcador
        marker.getElement().addEventListener('click', () => {
            mostrarModal();  // Mostrar la ventana modal cuando se hace clic en el marcador
        });
        // Agregar popup solo a la primera coordenada
        if (index === 0) {
            const popup = new maptilersdk.Popup({ offset: 50 })  // Ajuste de offset
                .setDOMContent(createPopupContent());
            marker.setPopup(popup).togglePopup();
        }
    });

    map.on('error', (e) => {
        console.error('Error cargando el mapa:', e.error);
    });
</script>
