@using Entidades

@inject Principal Principal
@inject IJSRuntime JS
@inject Blazored.Modal.Services.IModalService ModalService

<MostrarAlerta @ref="Alert" />
<!--HTML-->
<section class="h-100 h-custom" style="border-radius: 15px;">
    <div class="container py-5 h-100" style="max-width: 100%;">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12">
                <div class="card card-registration card-registration-2" style="border-radius: 15px;">
                    <div class="card-body p-0">
                        <div class="row g-0">
                            <div class="col-lg-8">
                                <div class="p-5">
                                    <!--TITULO CARRITO-->
                                    <div class="d-flex justify-content-between align-items-center mb-5">
                                        <h2 class="fw-bold mb-0">Carrito de Compras 🛒</h2>
                                        <div style="display:flex">
                                            <h6 class="mb-0 text-muted">Cantidad de productos </h6>
                                            <span class="cantidad-productos">@carrito.CantidadProductos</span>
                                        </div>
                                    </div>
                                    <hr class="my-4" style="margin-bottom:2% !important;">

                                    <!--INCIO PRODUCTO-->
                                    @if (carrito != null)
                                    {
                                        @foreach (var producto in carrito.Productos)
                                        {
                                            <div class="row mb-4 d-flex justify-content-between align-items-center" style="width:100% !important">
                                                @* PRODUCTO RESUMEN *@
                                                <div style="width:34%">
                                                    <img src="@producto.ImageUrl" class="img-fluid rounded-3" >
                                                </div>                                                
                                                <div style="width:22%">
                                                    <h6 class="text-muted">@producto.NombreProducto</h6>
                                                    <h6 class="mb-0">@producto.Descripcion</h6>
                                                </div>
                                                @* CANTIDADES *@
                                                <div style="width:20%; align-items: center; display:flex;">
                                                    <button data-mdb-button-init data-mdb-ripple-init class="btn btn-link px-2" @onclick="() => RemoverProducto(producto)">
                                                        <i class="fas fa-minus"></i>
                                                    </button>

                                                    <input value="@producto.Cantidad" id="form1" min="0" disabled="disabled" style="align-items: center;text-align: center;width: 50%;font-size: 14px;" />

                                                    <button data-mdb-button-init data-mdb-ripple-init class="btn btn-link px-2"
                                                    @onclick="() => AgregarProducto(producto)">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                                @* VALOR *@
                                                <div style="width:20%; text-align:center;">
                                                    <h5 class="mb-0">@Principal.FormatearPesos(producto.ValorCantidad)</h5>
                                                </div>
                                                @* REMOVER *@
                                                <div style="width:4%">
                                                    <a href="#!" class="text-muted" @onclick="() => RemoverProducto(producto)"><i class="fas fa-times"></i></a>
                                                </div>
                                            </div>      
                                            <hr class="my-4">
                                        }
                                    }
                                    <!--FIN PRODUCTO-->


                                    <div class="pt-5">
                                        <h6 class="mb-0">
                                            <a href="#!" class="text-body" @onclick="Close">
                                                <i class="fas fa-long-arrow-alt-left me-2"></i>Volver
                                            </a>
                                        </h6>
                                        <h6 class="mb-0" style="margin-left:10px" @onclick="RemoverCarrito">
                                            <a href="#!" class="text-body">
                                                <i class="fas fa-trash me-1"></i>Vaciar carrito
                                            </a>
                                        </h6>
                                    </div>
                                </div>
                            </div>

                            <!--RESUMEN-->
                            <div class="col-lg-4 bg-body-tertiary">
                                <div class="p-5">
                                    <h3 class="fw-bold mb-5 mt-2 pt-1">Resumen 📝</h3>
                                    <hr class="my-4" style="margin-bottom: 5% !important">

                                    <div class="d-flex justify-content-between mb-4">
                                        <h6>Total Productos </h6>
                                        @if(carrito != null)
                                        {
                                            <h6>@Principal.FormatearPesos(carrito.GetPrecioTotal())</h6>
                                        }
                                    </div>
                                    <!--ENVÍO-->
                                    <div class="d-flex justify-content-between mb-4">
                                        <h6>Envío Delivery</h6>
                                        @if(carrito != null)
                                        {
                                            <h6>@Principal.FormatearPesos(carrito.valorDeliveryMin) a @Principal.FormatearPesos(carrito.valorDeliveryMax)</h6>
                                        }
                                    </div>

                                    <!--DESCUENTOS-->
                                    <h5 class="mb-3">Descuentos</h5>

                                    <div class="mb-5">
                                        <div data-mdb-input-init class="form-outline">
                                            <input type="number" id="form3Examplea2" maxlength="10" class="form-control form-control-lg" />
                                        </div>
                                    </div>

                                    <hr class="my-4">

                                    <!--TOTAL-->
                                    <div class="d-flex justify-content-between mb-5">
                                        <h6 class="text-uppercase">Precio Total:</h6>
                                        @if(carrito != null)
                                        {
                                            <h6 class="fw-bold">@Principal.FormatearPesos(carrito.GetPrecioTotal())</h6>
                                        }
                                    </div>
                                    <br />
                                    <button class="custom-btn btn-3" @onclick="Checkout"><span>Checkout</span></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<div id="overlay">
    <center class="agrandar-botones" style="margin-top: 23%;">
        <button id="btnPresencial" class="custom-btn btn-5" @onclick="Presencial" style="width:28%; height: 70px;" title="Podrás comprar de forma presencial realizando una reserva.">
            <span style="font-size:26px;">
                Presencial <i class="fas fa-street-view" style="font-size: 24px; color: white;" />
            </span>
        </button>
@*         <button id="btnDelivery" class="custom-btn btn-5" @onclick="Delivery" style="width:28%; height: 70px; margin-left: 4%" title="Te enviaremos a tu domicilio los productos seleccionados.">
            <span style="font-size:26px;">Delivery  <i class="fas fa-truck" style="font-size: 24px; color: white;" /></span>
        </button>
 *@
        <button id="btnDelivery" class="custom-btn btn-5 truck-button" style="width:28%; height: 70px; margin-left: 4%">
            <span class="default" style="font-size:26px;">Delivery <i class="fas fa-truck" style="font-size: 24px; color: white;" /></span>
            <span class="success" style="font-size:26px;">
                Orden Registrada!
                <polyline points="1.5 6 4.5 9 10.5 1"></polyline>
            </span>
            <div class="truck">
                <div class="wheel"></div>
                <div class="back"></div>
                <div class="front"></div>
                <div class="box"></div>
            </div>
        </button>

        <!-- dribbble - twitter -->
        <a class="dribbble" href="https://dribbble.com/shots/9552163-Complete-order-button" target="_blank"><img src="https://cdn.dribbble.com/assets/dribbble-ball-mark-2bd45f09c2fb58dbbfb44766d5d1d07c5a12972d602ef8b32204d28fa3dda554.svg" alt=""></a>
        <a class="twitter" target="_blank" href="https://twitter.com/aaroniker_me"><svg xmlns="http://www.w3.org/2000/svg" width="72" height="72" viewBox="0 0 72 72"><path d="M67.812 16.141a26.246 26.246 0 0 1-7.519 2.06 13.134 13.134 0 0 0 5.756-7.244 26.127 26.127 0 0 1-8.313 3.176A13.075 13.075 0 0 0 48.182 10c-7.229 0-13.092 5.861-13.092 13.093 0 1.026.118 2.021.338 2.981-10.885-.548-20.528-5.757-26.987-13.679a13.048 13.048 0 0 0-1.771 6.581c0 4.542 2.312 8.551 5.824 10.898a13.048 13.048 0 0 1-5.93-1.638c-.002.055-.002.11-.002.162 0 6.345 4.513 11.638 10.504 12.84a13.177 13.177 0 0 1-3.449.457c-.846 0-1.667-.078-2.465-.231 1.667 5.2 6.499 8.986 12.23 9.09a26.276 26.276 0 0 1-16.26 5.606A26.21 26.21 0 0 1 4 55.976a37.036 37.036 0 0 0 20.067 5.882c24.083 0 37.251-19.949 37.251-37.249 0-.566-.014-1.134-.039-1.694a26.597 26.597 0 0 0 6.533-6.774z"></path></svg></a>
    </center>
</div>


<style>
    .truck-button {
        --color: #fff;
        --background: #2b3044;
        --tick: #16bf78;
        --base: #0d0f18;
        --wheel: #2b3044;
        --wheel-inner: #646b8c;
        --wheel-dot: #fff;
        --back: #6d58ff;
        --back-inner: #362a89;
        --back-inner-shadow: #2d246b;
        --front: #a6accd;
        --front-shadow: #535a79;
        --front-light: #fff8b1;
        --window: #2b3044;
        --window-shadow: #404660;
        --street: #646b8c;
        --street-fill: #404660;
        --box: #dcb97a;
        --box-shadow: #b89b66;
        cursor: pointer;
        text-align: center;
        position: relative;
        border: none;
        outline: none;
        color: var(--color);
        background: var(--background);
        border-radius: var(--br, 5px);
        -webkit-appearance: none;
        -webkit-tap-highlight-color: transparent;
        transform-style: preserve-3d;
        transform: rotateX(var(--rx, 0deg)) translateZ(0);
        transition: transform 1.5s, border-radius 0.3s linear var(--br-d, 0s);
    }

        .truck-button:before, .truck-button:after {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 6px;
            display: block;
            background: var(--b, var(--street));
            transform-origin: 0 100%;
            transform: rotateX(90deg) scaleX(var(--sy, 1));
        }

        .truck-button:after {
            --sy: var(--progress, 0);
            --b: var(--street-fill);
        }

        .truck-button .default,
        .truck-button .success {
            display: block;
            font-weight: 500;
            font-size: 14px;
            opacity: var(--o, 1);
            transition: opacity 0.3s;
        }

        .truck-button .success {
            --o: 0;
            position: absolute;
            top: 12px;
            left: 0;
            right: 0;
        }

            .truck-button .success svg {
                width: 12px;
                height: 10px;
                display: inline-block;
                vertical-align: top;
                fill: none;
                margin: 7px 0 0 4px;
                stroke: var(--tick);
                stroke-width: 2;
                stroke-linecap: round;
                stroke-linejoin: round;
                stroke-dasharray: 16px;
                stroke-dashoffset: var(--offset, 16px);
                transition: stroke-dashoffset 0.4s ease 0.45s;
            }

        .truck-button .truck {
            position: absolute;
            width: 72px;
            height: 28px;
            transform: rotateX(90deg) translate3d(var(--truck-x, 4px), calc(var(--truck-y-n, -26) * 1px), 12px);
        }

            .truck-button .truck:before, .truck-button .truck:after {
                content: "";
                position: absolute;
                bottom: -6px;
                left: var(--l, 18px);
                width: 10px;
                height: 10px;
                border-radius: 50%;
                z-index: 2;
                box-shadow: inset 0 0 0 2px var(--wheel), inset 0 0 0 4px var(--wheel-inner);
                background: var(--wheel-dot);
                transform: translateY(calc(var(--truck-y) * -1px)) translateZ(0);
            }

            .truck-button .truck:after {
                --l: 54px;
            }

            .truck-button .truck .wheel,
            .truck-button .truck .wheel:before {
                position: absolute;
                bottom: var(--b, -6px);
                left: var(--l, 6px);
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background: var(--wheel);
                transform: translateZ(0);
            }

            .truck-button .truck .wheel {
                transform: translateY(calc(var(--truck-y) * -1px)) translateZ(0);
            }

                .truck-button .truck .wheel:before {
                    --l: 35px;
                    --b: 0;
                    content: "";
                }

            .truck-button .truck .front,
            .truck-button .truck .back,
            .truck-button .truck .box {
                position: absolute;
            }

            .truck-button .truck .back {
                left: 0;
                bottom: 0;
                z-index: 1;
                width: 47px;
                height: 28px;
                border-radius: 1px 1px 0 0;
                background: linear-gradient(68deg, var(--back-inner) 0%, var(--back-inner) 22%, var(--back-inner-shadow) 22.1%, var(--back-inner-shadow) 100%);
            }

                .truck-button .truck .back:before, .truck-button .truck .back:after {
                    content: "";
                    position: absolute;
                }

                .truck-button .truck .back:before {
                    left: 11px;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    z-index: 2;
                    border-radius: 0 1px 0 0;
                    background: var(--back);
                }

                .truck-button .truck .back:after {
                    border-radius: 1px;
                    width: 73px;
                    height: 2px;
                    left: -1px;
                    bottom: -2px;
                    background: var(--base);
                }

            .truck-button .truck .front {
                left: 47px;
                bottom: -1px;
                height: 22px;
                width: 24px;
                -webkit-clip-path: polygon(55% 0, 72% 44%, 100% 58%, 100% 100%, 0 100%, 0 0);
                clip-path: polygon(55% 0, 72% 44%, 100% 58%, 100% 100%, 0 100%, 0 0);
                background: linear-gradient(84deg, var(--front-shadow) 0%, var(--front-shadow) 10%, var(--front) 12%, var(--front) 100%);
            }

                .truck-button .truck .front:before, .truck-button .truck .front:after {
                    content: "";
                    position: absolute;
                }

                .truck-button .truck .front:before {
                    width: 7px;
                    height: 8px;
                    background: #fff;
                    left: 7px;
                    top: 2px;
                    -webkit-clip-path: polygon(0 0, 60% 0%, 100% 100%, 0% 100%);
                    clip-path: polygon(0 0, 60% 0%, 100% 100%, 0% 100%);
                    background: linear-gradient(59deg, var(--window) 0%, var(--window) 57%, var(--window-shadow) 55%, var(--window-shadow) 100%);
                }

                .truck-button .truck .front:after {
                    width: 3px;
                    height: 2px;
                    right: 0;
                    bottom: 3px;
                    background: var(--front-light);
                }

            .truck-button .truck .box {
                width: 13px;
                height: 13px;
                right: 56px;
                bottom: 0;
                z-index: 1;
                border-radius: 1px;
                overflow: hidden;
                transform: translate(calc(var(--box-x, -24) * 1px), calc(var(--box-y, -6) * 1px)) scale(var(--box-s, 0.5));
                opacity: var(--box-o, 0);
                background: linear-gradient(68deg, var(--box) 0%, var(--box) 50%, var(--box-shadow) 50.2%, var(--box-shadow) 100%);
                background-size: 250% 100%;
                background-position-x: calc(var(--bx, 0) * 1%);
            }

                .truck-button .truck .box:before, .truck-button .truck .box:after {
                    content: "";
                    position: absolute;
                }

                .truck-button .truck .box:before {
                    content: "";
                    background: rgba(255, 255, 255, 0.2);
                    left: 0;
                    right: 0;
                    top: 6px;
                    height: 1px;
                }

                .truck-button .truck .box:after {
                    width: 6px;
                    left: 100%;
                    top: 0;
                    bottom: 0;
                    background: var(--back);
                    transform: translateX(calc(var(--hx, 0) * 1px));
                }

        .truck-button.animation {
            --rx: -90deg;
            --br: 0;
        }

            .truck-button.animation .default {
                --o: 0;
            }

            .truck-button.animation.done {
                --rx: 0deg;
                --br: 5px;
                --br-d: 0.2s;
            }

                .truck-button.animation.done .success {
                    --o: 1;
                    --offset: 0;
                }

   

    .agrandar-botones {
        transform: scale(0);
        animation: agrandar-botones 1.7s ease-in-out forwards;
    }

    @@keyframes agrandar-botones {
        0% {
            transform: scale(0);
        }

        100% {
            transform: scale(1);
        }
    }

    /* CAPA NEGRA */
    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: black;
        display: none; /* Cambiado a 'none' para que esté oculto inicialmente */
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.1/gsap.min.js"></script>

<script>
    function BlackScreen() {
        const overlay = document.getElementById("overlay");
        overlay.style.display = "block";
        overlay.style.opacity = "1";
    }
    function RemoveBlackScreen() {

        const overlay = document.getElementById("overlay");
        overlay.style.display = "none";
    }
    var button = document.getElementById("btnDelivery");
    var buttonWidth = button.Width;

    document.querySelectorAll(".truck-button").forEach((button) => {
        button.addEventListener("click", (e) => {
            e.preventDefault();

            let box = button.querySelector(".box"),
                truck = button.querySelector(".truck");

            if (!button.classList.contains("done")) {
                if (!button.classList.contains("animation")) {
                    button.classList.add("animation");
                    if (gsap != null) {
                        gsap.to(button, {
                            "--box-s": 1,
                            "--box-o": 1,
                            duration: 0.3,
                            delay: 0.5
                        });

                        gsap.to(box, {
                            x: 0,
                            duration: 0.4,
                            delay: 0.7
                        });

                        gsap.to(button, {
                            "--hx": -5,
                            "--bx": 50,
                            duration: 0.18,
                            delay: 0.92
                        });

                        gsap.to(box, {
                            y: 0,
                            duration: 0.1,
                            delay: 1.15
                        });

                        gsap.set(button, {
                            "--truck-y": 0,
                            "--truck-y-n": -26
                        });

                        gsap.to(button, {
                            "--truck-y": 1,
                            "--truck-y-n": -25,
                            duration: 0.2,
                            delay: 1.55,
                            onComplete() {
                                gsap.timeline({
                                    onComplete() {
                                        button.classList.add("done");
                                    }
                                })
                                    .to(truck, {
                                        x: 0,
                                        duration: 0.4
                                    })
                                    .to(truck, {
                                        // x: buttonWidth * 0.5,
                                        x: 150,
                                        duration: 1
                                    })
                                    .to(truck, {
                                        // x: buttonWidth * 0.48,
                                        x: 140,
                                        duration: 0.6
                                    })
                                    .to(truck, {
                                        // x: buttonWidth, // Mueve el truck al 50% del ancho del botón,
                                        x: 465, 
                                        duration: 0.5
                                    });                                
                            }
                        });
                    }
                }
            } else {
                button.classList.remove("animation", "done");
                gsap.set(truck, {
                    x: 4
                });
                gsap.set(button, {
                    "--progress": 0,
                    "--hx": 0,
                    "--bx": 0,
                    "--box-s": 0.5,
                    "--box-o": 0,
                    "--truck-y": 0,
                    "--truck-y-n": -26
                });
                gsap.set(box, {
                    x: -24,
                    y: -6
                });
            }
        });
    });


</script>
<!--BLAZOR-->
@code {
    //PARAMETROS GENERALES
    [CascadingParameter] Blazored.Modal.BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public EventCallback<string> OnEventoCarrito { get; set; }
    Order carrito = new Order();
    public MostrarAlerta Alert;

    protected override async Task OnInitializedAsync()
    {        
        carrito = Principal.GetCarrito();
        Principal.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        Principal.OnChange -= StateHasChanged;
    }
    private async Task Close()
    {
        await ModalInstance.CloseAsync();
    }

    // CHECKOUT
    private void Checkout()
    {
        Alert.ShowBlackScreen();
    }
    private async Task Presencial()
    {
        Alert.RemoveBlackScreen();
        await Close();
        ModalService.Show<Mapa>();
        
    }
    private void Delivery()
    {
        //Alert.DefaultAlert("Checkout", "EN CONSTRUCCIÓN", "warning");
        //Alert.RemoveBlackScreen();
    }
    private async Task RemoverProducto(Productos producto)
    {
        try
        {
            if (carrito.Productos.Count > 0)
            {
                var confirmado = await Alert.ConfirmAlert($"¿Estas seguro de remover el {producto.NombreProducto}?", "", "warning");
                if (confirmado)
                {
                    if (producto != null && producto.IdProducto != 0)
                    {
                        carrito.CantidadProductos--;
                        var productoRepetido = carrito.Productos.FirstOrDefault(p => p.IdProducto == producto.IdProducto);
                        if (productoRepetido?.Cantidad > 1)
                        {
                            productoRepetido.ValorCantidad = productoRepetido.ValorCantidad - producto.Valor;
                            productoRepetido.Cantidad--;
                        }
                        else
                        {                            
                            Principal.RemoverProducto(producto);
                        }

                        var productoSeleccionado = Principal.Productos.FirstOrDefault(p => p.IdProducto == producto.IdProducto);
                        if (productoSeleccionado != null)
                        {
                            productoSeleccionado.Stock++; //DEVOLVER STOCK
                        }
                        Principal.UpdateCarritoChanged();

                        Alert.ShowAlert("Producto removido!", $"Se ha removido el {producto.NombreProducto} correctamente del carrito!", "success");
                        if(carrito.CantidadProductos == 0)
                        {
                            await Close();
                            return;
                        }
                    }
                    else
                    {
                        Alert.ShowAlert("Informativo", "No se ha podido remover los productos.", "warning");
                    }
                }
            }
            else
            {
                Alert.ShowAlert("Informativo", "No se ha podido eliminar los productos.", "warning");
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }        
    }
    private async Task RemoverCarrito()
    {
        try
        {
            if (carrito.Productos.Count > 0)
            {
                var confirmado = await Alert.ConfirmAlert($"¿Estas seguro de vaciar el carrito?", "", "warning");
                if (confirmado)
                {
                    carrito.CantidadProductos = 0;
                    if (carrito.Productos?.Count > 0)
                    {
                        carrito.Productos.ForEach(producto =>
                        {
                            var productoSeleccionado = Principal.Productos.FirstOrDefault(p => p.IdProducto == producto.IdProducto);
                            if (productoSeleccionado != null)
                            {
                                productoSeleccionado.Stock += producto.Cantidad;
                                productoSeleccionado.Cantidad = 1; //DEFAULT EN 1
                                productoSeleccionado.ValorCantidad = 0;                                
                            }
                        });
                        carrito.Productos.Clear();
                    }                    
                    Principal.UpdateCarritoChanged();

                    Alert.ShowAlert("Carrito vaciado!", $"Se han removidos los productos correctamente del carrito!", "success");
                    if (carrito.CantidadProductos == 0)
                    {
                        await Close();
                        return;
                    }
                }
            }
            else
            {
                Alert.ShowAlert("Informativo", "No se ha podido eliminar los productos.", "warning");
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }
    private async Task AgregarProducto(Productos producto)
    {
        try
        {
            if (carrito.Productos.Count > 0)
            {
                var confirmado = await Alert.ConfirmAlertGreen($"¿Desea agregar un {producto.NombreProducto} a su compra?", "", "warning", producto.ImageUrl);
                if (confirmado)
                {
                    if (producto.Stock > 0)
                    {
                        if (Principal.Productos.Any(p => p.IdProducto == producto.IdProducto))
                        {
                            var productoExistente = carrito.Productos.FirstOrDefault(p => p.IdProducto == producto.IdProducto);

                            if (productoExistente != null)
                            {
                                productoExistente.Cantidad++;
                                productoExistente.ValorCantidad = productoExistente.ValorCantidad + producto.Valor; //REPETIDO
                                productoExistente.Stock--;
                            }
                        }
                        
                        carrito.CantidadProductos++;
                        Principal.AgregarCarrito(carrito);
                        
                        var valorTotal = Principal.FormatearPesos(producto.Valor);
                        Alert.CustomAlert($"Se agrego {producto.NombreProducto} al carrito! 🛒", valorTotal, "success", carrito, producto.ImageUrl);
                    }
                    else
                    {
                        Alert.ShowAlert("Sin Stock", "El producto seleccionado no tiene más stock, esperar que el administrador ingrese más.", "warning");
                    }
                    return;
                }
            }
        }
        catch (Exception ex)
        { 
            throw new NotImplementedException();
        }
    }
}